<?php

namespace App\Nova;

use Eibrahimli\CalculatedField\BroadcasterField;
use Eibrahimli\CalculatedField\ListenerField;
use Epartment\NovaDependencyContainer\NovaDependencyContainer;
use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use KossShtukert\LaravelNovaSelect2\Select2;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\Date;
use Laravel\Nova\Fields\HasMany;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\MorphTo;
use Laravel\Nova\Fields\Select;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;
use Yassi\NestedForm\NestedForm;

class Work extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Models\Work::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';

    public static $group = 'Mühasibatlıq';

    public static function label(): string
    {
        return 'İş və xidmətlər'; // TODO: Change the autogenerated stub
    }

    public static function singularLabel(): string
    {
        return 'İş və xidmət'; // TODO: Change the autogenerated stub
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            BelongsTo::make(__('Müqavilə'), 'contract', Contract::class)->onlyOnIndex(),
            Select2::make(__('Müqavilə'), 'contract_id')
                ->options(\App\Models\Contract::all()->mapWithKeys(function ($contract) {
                    return [$contract->id => $contract->supplier->name." ".$contract->branch->name." ".$contract->contract_number];
                }))
                ->displayUsingLabels(),
            Text::make(__("Hesab Faktura Nömrəsi"),"invoice_number"),
            Text::make(__("EQF Nömrəsi"),"einvoice_number"),
            Date::make(__("EQF Tarixi"),"einvoice_date"),
            Text::make(__("Cəmi məbləğ"),"price"),
            Text::make(__("ƏDV"),"edv"),
            Text::make(__("Yekun məbləğ"),"total_price"),
            Boolean::make("Status","status")->trueValue('1')->falseValue( '0'),
            NestedForm::make('WorkInner')->heading('İş və xidmət yarat'),
            HasMany::make(__('İş və xidmətlər'), 'workInner', WorkInner::class)->onlyOnDetail(),


        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }
}
