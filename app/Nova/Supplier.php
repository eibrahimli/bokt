<?php

namespace App\Nova;

use App\Nova\Filters\SupplierCustomerTypeFilter;
use App\Nova\Filters\SupplierNameFilter;
use App\Nova\Filters\SupplierPriceFilter;
use App\Nova\Filters\SupplierRestPriceFilter;
use App\Nova\Filters\SupplierVoenFilter;
use App\Nova\Metrics\NewSuppliers;
use App\Nova\Metrics\SuppliersPaid;
use App\Nova\Metrics\SuppliersRest;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;
use Maatwebsite\LaravelNovaExcel\Actions\DownloadExcel;
use NrmlCo\NovaBigFilter\NovaBigFilter;

class Supplier extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Models\Supplier::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name';

    public static $group = 'Mühasibatlıq';

    public static function label(): string
    {
        return 'Kreditorlar'; // TODO: Change the autogenerated stub
    }

    public static function singularLabel(): string
    {
        return 'Kreditor'; // TODO: Change the autogenerated stub
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'name','voen'
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            BelongsTo::make(__('Hüquqi forması'), 'customerType', CustomerType::class)->showCreateRelationButton(),
            Text::make('Kreditorun adı', 'name'),
            Text::make('Kreditorun voeni', 'voen'),

            BelongsTo::make(__('Qeydiyyatda olduğu ölkə'), 'country', Country::class)->showCreateRelationButton(),
            Text::make('Ödənilən', 'paid_amount')
                ->withMeta(['extraAttributes' => [
                    'readonly' => true
                ]]),
            Text::make('Qalıq borc', 'rest_amount')
                ->withMeta(['extraAttributes' => [
                    'readonly' => true
                ]]),
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [
            new NewSuppliers(null,$this,"Yeni təchizatçılar","new"),
            new SuppliersPaid(null,$this,"Ödənilmiş məbləğ","paid"),
            new SuppliersRest(null,$this,"Qalan borc","rest"),

            new NovaBigFilter(),

        ];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [
            new SupplierNameFilter(),
            new SupplierVoenFilter(),
            new SupplierCustomerTypeFilter(),
            new SupplierPriceFilter(),
            new SupplierRestPriceFilter(),
        ];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            (new DownloadExcel())->withHeadings(),
        ];
    }
}
