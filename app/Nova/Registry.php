<?php

namespace App\Nova;

use App\Nova\Filters\ContractAccountFilter;
use App\Nova\Filters\ContractBrachFilter;
use App\Nova\Filters\ContractFilter;
use App\Nova\Filters\ContractSupplierFilter;
use App\Nova\Filters\CreditFilter;
use App\Nova\Filters\DebetFilter;
use App\Nova\Filters\OperationTypeFilter;
use App\Nova\Filters\RegistryAmountFilter;
use App\Nova\Filters\RegistryDateFilter;
use App\Nova\Metrics\AssetsMetrics;
use App\Nova\Metrics\RegistryMetrics;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Laravel\Nova\Fields\BelongsTo;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;
use Maatwebsite\LaravelNovaExcel\Actions\DownloadExcel;
use NrmlCo\NovaBigFilter\NovaBigFilter;

class Registry extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Models\Registry::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name';

    public static $group = 'Mühasibatlıq';

    public static function label(): string
    {
        return 'Reyestr'; // TODO: Change the autogenerated stub
    }

    public static function singularLabel(): string
    {
        return 'Reyestr'; // TODO: Change the autogenerated stub
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make(__('ID'), 'id')->sortable(),
            Text::make(__("Məbləğ"),"amount"),
            BelongsTo::make(__('Müxabirləşmə (Debet)'), 'debetAccount', DcAccount::class)->showCreateRelationButton(),
            BelongsTo::make(__('Müxabirləşmə (Kredit)'), 'creditAccount', DcAccount::class)->showCreateRelationButton(),
            Text::make(__("Əməliyyat"),"reg_type"),
            Text::make(__("Əməliyyat nömrəsi"),"reg_id"),
            Text::make(__("Xərcin tipi"),"product_id"),
            Text::make(__("Xərcin adı"),"product_name"),
            BelongsTo::make(__('Alıcı (filial)'), 'branch', Branch::class),
            BelongsTo::make(__('Təchizatçı'), 'supplier', Supplier::class),
            BelongsTo::make(__('Müqavilə'), 'work', Work::class),
            BelongsTo::make(__('Hesab'), 'account', Account::class),
            BelongsTo::make('Müştəri', 'customer', Customer::class),
            Text::make(__("Tarix"),"created_at"),

        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [
            new NovaBigFilter(),
            new RegistryMetrics(null,$this,"Yeni reyestr","new"),
            new RegistryMetrics(null,$this,"Toplam məbləğ","price"),
        ];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [
            new ContractAccountFilter(),
            new ContractBrachFilter(),
            new ContractSupplierFilter(),
            new ContractFilter(),
            new DebetFilter(),
            new CreditFilter(),
            new RegistryAmountFilter(),
            new RegistryDateFilter(),
            new OperationTypeFilter()
        ];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            (new DownloadExcel())->withHeadings(),
        ];
    }
}
